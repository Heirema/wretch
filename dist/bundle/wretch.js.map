{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: Object, two: Object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one, ...two }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : clone[prop] = two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            }\n        }\n    }\n\n    return clone\n}\n","import { mix } from \"./mix\"\n\n// Default options\nlet defaults = {}\nlet errorType = null\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    constructor(\n        private _url: string,\n        private _options = {}) {}\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     */\n    defaults(opts: Object) {\n        defaults = opts\n        return this\n    }\n\n    /**\n     * Mixins the default fetch options used for every subsequent fetch calls.\n     * @param opts Options to mixin with the current default options\n     */\n    mixdefaults(opts: Object) {\n        defaults = mix(defaults, opts)\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        errorType = method\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the url specified and the same options.\n     * @param url String url\n     */\n    url(url: string) {\n        return new Wretcher(url, this._options)\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     */\n    options(options: Object) {\n        return new Wretcher(this._url, options)\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: Object) {\n        return new Wretcher(appendQueryParams(this._url, qp), this._options)\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param what Header value\n     */\n    accept(what: string) {\n        return new Wretcher(this._url, mix(this._options, { headers: { \"Accept\" : what }}))\n    }\n\n    /**\n    * Performs a get request.\n    */\n    get(opts = {}) {\n        return doFetch(this._url)(mix(opts, this._options))\n    }\n    /**\n    * Performs a delete request.\n    */\n    delete(opts = {}) {\n        return doFetch(this._url)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n    * Performs a put request.\n    */\n    put(opts = {}) {\n        return doFetch(this._url)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n    * Performs a post request.\n    */\n    post(opts = {}) {\n        return doFetch(this._url)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n    * Performs a patch request.\n    */\n    patch(opts = {}) {\n        return doFetch(this._url)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object\n     */\n    json(jsObject: Object) {\n        return new Wretcher(this._url,\n            { \n                ...this._options,\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(jsObject)\n            })\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object\n     */\n    formData(formObject: Object) {\n        const formData = new FormData()\n        for(const key in formObject) {\n            if(formObject[key] instanceof Array) {\n                for(const item of formObject[key])\n                    formData.append(key + \"[]\", item)\n            } else {\n                formData.append(key, formObject[key])\n            }\n        }\n\n        return new Wretcher(this._url,\n            { \n                ...this._options,\n                body: formData\n            })\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: Object) => {\n    const usp = new URLSearchParams()\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n\ntype WretcherError = Error & { status: number, response: Response, text?: string, json?: Object }\n\nconst doFetch = url => (opts = {}) => {\n    const req = fetch(url, mix(defaults, opts))\n    let wrapper : Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n    let catchers = []\n    const doCatch = <T>(promise : Promise<T>) : Promise<T> => catchers.reduce((accumulator, catcher) => accumulator.catch(catcher), promise)\n    const responseTypes = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res:  (cb?: (response : Response) => any) => doCatch(wrapper.then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: (cb?: (json : Object) => any) => doCatch(wrapper\n            .then(_ => _ && _.json())\n            .then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: (cb?: (blob : Blob) => any) => doCatch(wrapper\n            .then(_ => _ && _.blob())\n            .then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: (cb?: (fd : FormData) => any) => doCatch(wrapper\n            .then(_ => _ && _.formData())\n            .then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: (cb?: (ab : ArrayBuffer) => any) => doCatch(wrapper\n            .then(_ => _ && _.arrayBuffer())\n            .then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: (cb?: (text : string) => any) => doCatch(wrapper\n            .then(_ => _ && _.text())\n            .then(_ => _ && cb && cb(_) || _)),\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error: (code: number, cb) => {\n            catchers.push(err => {\n                if(err.status === code) cb(err)\n                else throw err\n            })\n            return responseTypes\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: (cb: (error: WretcherError) => any) => responseTypes.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: (cb: (error: WretcherError) => any) => responseTypes.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: (cb: (error: WretcherError) => any) => responseTypes.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: (cb: (error: WretcherError) => any) => responseTypes.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: (cb: (error: WretcherError) => any) => responseTypes.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: (cb: (error: WretcherError) => any) => responseTypes.error(500, cb)\n    }\n\n    return responseTypes\n}","import { Wretcher } from \"./wretcher\"\n\n// URLSearchParams for node.js\ndeclare const global\ndeclare const require\nif(typeof self === \"undefined\") {\n    global.URLSearchParams = require(\"url\").URLSearchParams\n}\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default (url = \"\", opts = {}) => new Wretcher(url, opts)"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","defaults","errorType","_url","_options","this","Wretcher","opts","method","url","options","qp","appendQueryParams","what","headers","Accept","doFetch","jsObject","Content-Type","body","JSON","stringify","formObject","formData","FormData","key","_a","_i","item","append","usp","URLSearchParams","index","indexOf","val","substring","toString","wrapper","fetch","then","response","ok","_","err","Error","status","catchers","doCatch","promise","reduce","accumulator","catcher","catch","responseTypes","res","cb","json","blob","arrayBuffer","text","error","code","push","badRequest","unauthorized","forbidden","notFound","timeout","internalError","self","global","require"],"mappings":"0VAAO,IAAMA,EAAM,SAASC,EAAaC,EAAaC,GAClD,gBADkDA,OAC9CF,IAAQC,GAAsB,iBAARD,GAAmC,iBAARC,EACjD,OAAOD,EAEX,IAAMG,OAAaH,EAAQC,GAC3B,IAAI,IAAMG,KAAQH,EACXA,EAAII,eAAeD,KACfH,EAAIG,aAAiBE,OAASN,EAAII,aAAiBE,MAClDH,EAAMC,GAAQF,EAAmBF,EAAII,UAAUH,EAAIG,IAAUD,EAAMC,GAAQH,EAAIG,GACpD,iBAAdH,EAAIG,IAA2C,iBAAdJ,EAAII,KAClDD,EAAMC,GAAQL,EAAIC,EAAII,GAAOH,EAAIG,GAAOF,KAKpD,OAAOC,GCZPI,KACAC,EAAY,kBASZ,WACYC,EACAC,gBAAAA,MADAC,UAAAF,EACAE,cAAAD,EAuIhB,OAjIIE,qBAAA,SAASC,GAEL,OADAN,EAAWM,EACJF,MAOXC,wBAAA,SAAYC,GAER,OADAN,EAAWR,EAAIQ,EAAUM,GAClBF,MAUXC,sBAAA,SAAUE,GAEN,OADAN,EAAYM,EACLH,MAOXC,gBAAA,SAAIG,GACA,OAAO,IAAIH,EAASG,EAAKJ,KAAKD,WAOlCE,oBAAA,SAAQI,GACJ,OAAO,IAAIJ,EAASD,KAAKF,KAAMO,IAcnCJ,kBAAA,SAAMK,GACF,OAAO,IAAIL,EAASM,EAAkBP,KAAKF,KAAMQ,GAAKN,KAAKD,WAO/DE,mBAAA,SAAOO,GACH,OAAO,IAAIP,EAASD,KAAKF,KAAMV,EAAIY,KAAKD,UAAYU,SAAWC,OAAWF,OAM9EP,gBAAA,SAAIC,GACA,oBADAA,MACOS,EAAQX,KAAKF,MAAMV,EAAIc,EAAMF,KAAKD,YAK7CE,mBAAA,SAAOC,GACH,oBADGA,MACIS,EAAQX,KAAKF,WAAWV,EAAIc,EAAMF,KAAKD,WAAWI,OAAQ,aAKrEF,gBAAA,SAAIC,GACA,oBADAA,MACOS,EAAQX,KAAKF,WAAWV,EAAIc,EAAMF,KAAKD,WAAWI,OAAQ,UAKrEF,iBAAA,SAAKC,GACD,oBADCA,MACMS,EAAQX,KAAKF,WAAWV,EAAIc,EAAMF,KAAKD,WAAWI,OAAQ,WAKrEF,kBAAA,SAAMC,GACF,oBADEA,MACKS,EAAQX,KAAKF,WAAWV,EAAIc,EAAMF,KAAKD,WAAWI,OAAQ,YAOrEF,iBAAA,SAAKW,GACD,OAAO,IAAIX,EAASD,KAAKF,UAEdE,KAAKD,UACRU,SAAWI,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUJ,OAOjCX,qBAAA,SAASgB,GACL,IAAMC,EAAW,IAAIC,SACrB,IAAI,IAAMC,KAAOH,EACb,GAAGA,EAAWG,aAAgBzB,MAC1B,IAAkB,QAAA0B,EAAAJ,EAAWG,GAAXE,WAAAA,KAAd,IAAMC,OACNL,EAASM,OAAOJ,EAAM,KAAMG,QAEhCL,EAASM,OAAOJ,EAAKH,EAAWG,IAIxC,OAAO,IAAInB,EAASD,KAAKF,UAEdE,KAAKD,UACRe,KAAMI,WAOhBX,EAAoB,SAACH,EAAaE,GACpC,IAAMmB,EAAM,IAAIC,gBACVC,EAAQvB,EAAIwB,QAAQ,KAC1B,IAAI,IAAMR,KAAOd,EACb,GAAGA,EAAGc,aAAgBzB,MAClB,IAAiB,QAAA0B,EAAAf,EAAGc,GAAHE,WAAAA,KAAb,IAAMO,OACNJ,EAAID,OAAOJ,EAAKS,QAEpBJ,EAAID,OAAOJ,EAAKd,EAAGc,IAG3B,OAAQO,EACDvB,EAAI0B,UAAU,EAAGH,OAAUF,EAAIM,WAC/B3B,MAAOqB,EAAIM,YAKhBpB,EAAU,SAAAP,GAAO,OAAA,SAACF,gBAAAA,MACpB,IACI8B,EADQC,MAAM7B,EAAKhB,EAAIQ,EAAUM,IACQgC,KAAK,SAAAC,GAC9C,OAAKA,EAASC,GASPD,EARIA,EAAStC,GAAa,UAAUqC,KAAK,SAAAG,GACxC,IAAMC,EAAM,IAAIC,MAAMF,GAItB,MAHAC,EAAIzC,GAAawC,EACjBC,EAAY,OAAIH,EAASK,OACzBF,EAAc,SAAIH,EACZG,MAKdG,KACEC,EAAU,SAAIC,GAAsC,OAAAF,EAASG,OAAO,SAACC,EAAaC,GAAY,OAAAD,EAAYE,MAAMD,IAAUH,IAC1HK,GAIFC,IAAM,SAACC,GAAsC,OAAAR,EAAQV,EAAQE,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAI3Fc,KAAM,SAACD,GAAgC,OAAAR,EAAQV,EAC1CE,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEc,SACjBjB,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAInCe,KAAM,SAACF,GAA8B,OAAAR,EAAQV,EACxCE,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEe,SACjBlB,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAInCnB,SAAU,SAACgC,GAAgC,OAAAR,EAAQV,EAC9CE,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEnB,aACjBgB,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAInCgB,YAAa,SAACH,GAAmC,OAAAR,EAAQV,EACpDE,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEgB,gBACjBnB,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAInCiB,KAAM,SAACJ,GAAgC,OAAAR,EAAQV,EAC1CE,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEiB,SACjBpB,KAAK,SAAAG,GAAK,OAAAA,GAAKa,GAAMA,EAAGb,IAAMA,MAInCkB,MAAO,SAACC,EAAcN,GAKlB,OAJAT,EAASgB,KAAK,SAAAnB,GACV,GAAGA,EAAIE,SAAWgB,EACb,MAAMlB,EADaY,EAAGZ,KAGxBU,GAKXU,WAAY,SAACR,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,IAI5ES,aAAc,SAACT,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,IAI9EU,UAAW,SAACV,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,IAI3EW,SAAU,SAACX,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,IAI1EY,QAAS,SAACZ,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,IAIzEa,cAAe,SAACb,GAAsC,OAAAF,EAAcO,MAAM,IAAKL,KAGnF,OAAOF,IC9PQ,oBAATgB,OACNC,OAAOvC,gBAAkBwC,QAAQ,OAAOxC,wBAM7B,SAACtB,EAAUF,GAAc,oBAAxBE,mBAAUF,MAAc,IAAID,EAASG,EAAKF"}